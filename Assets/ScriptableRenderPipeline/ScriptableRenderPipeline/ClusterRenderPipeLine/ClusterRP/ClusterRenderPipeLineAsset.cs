using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Experimental.Rendering;
using Viva.Rendering.RenderGraph;

namespace Viva.Rendering.RenderGraph.ClusterPipeline
{
    [Serializable]
    public class RenderingSettings
    {
        public bool useForwardRenderingOnly; // TODO: Currently there is no way to strip the extra forward shaders generated by the shaders compiler, so we can switch dynamically.
        public bool useDepthPrepass;
        public bool useScreenSpaceShadow;
        public bool usePostEffects;
        public bool useTAA;

        public bool useDeferredRendering = false;

        // We have to fall back to forward-only rendering when scene view is using wireframe rendering mode --
        // as rendering everything in wireframe + deferred do not play well together
        public bool ShouldUseForwardRenderingOnly()
        {
            return useForwardRenderingOnly || GL.wireframe;
        }
    }

    public class ClusterRenderPipeLineAsset : RenderPipelineAsset
    {
        public static readonly string m_StandardShaderPath = "Viva/ClusterShading";
        ClusterRenderPipeLineAsset()
        { }

        protected override IRenderPipeline InternalCreatePipeline()
        {
            return new ClusterRenderPipeline(this);
        }

        [SerializeField]
        ClusterRenderPipelineResources m_RenderPipelineResources;
        public ClusterRenderPipelineResources renderPipelineResources
        {
            get { return m_RenderPipelineResources; }
            set { m_RenderPipelineResources = value; }
        }

        [SerializeField]
        RenderGraphAsset m_DefaultRenderGraphAsset;
        public RenderGraphAsset defaultRenderGraphAsset
        {
            get { return m_DefaultRenderGraphAsset; }
            set { m_DefaultRenderGraphAsset = value; }
        }

        [SerializeField]
        Material m_DefaultDiffuseMaterial;
        [SerializeField]
        Shader m_DefaultShader;

        public Material defaultDiffuseMaterial
        {
            get { return m_DefaultDiffuseMaterial; }
            set { m_DefaultDiffuseMaterial = value; }
        }

        public Shader defaultShader
        {
            get { return m_DefaultShader; }
            set { m_DefaultShader = value; }
        }
        // NOTE: All those properties are public because of how HDRenderPipelineInspector retrieves those properties via serialization/reflection
        // Doing it this way allows to change parameters name and still retrieve correct serialized values

        //Render Settings
        public RenderingSettings renderSettings = new RenderingSettings();
        public ClusterPass.ClusterSettings clusterSettings = new ClusterPass.ClusterSettings();
        public SubsurfaceScatteringSettings sssSettings;

        //Shadow settings
        public ShadowInitParameters shadowInitParams = new ShadowInitParameters();

        //Texture settings
        public TextureSettings textureSettings = new TextureSettings();

        public override Shader GetDefaultShader()
        {
            return m_DefaultShader;
        }

        public override Material GetDefaultMaterial()
        {
            return m_DefaultDiffuseMaterial;
        }

        public override Material GetDefaultParticleMaterial()
        {
            return null;
        }

        public override Material GetDefaultLineMaterial()
        {
            return null;
        }

        public override Material GetDefaultTerrainMaterial()
        {
            return null;
        }

        public override Material GetDefaultUIMaterial()
        {
            return null;
        }

        public override Material GetDefaultUIOverdrawMaterial()
        {
            return null;
        }

        public override Material GetDefaultUIETC1SupportedMaterial()
        {
            return null;
        }

        public override Material GetDefault2DMaterial()
        {
            return null;
        }

        public void OnValidate()
        {
        }
    }
}
