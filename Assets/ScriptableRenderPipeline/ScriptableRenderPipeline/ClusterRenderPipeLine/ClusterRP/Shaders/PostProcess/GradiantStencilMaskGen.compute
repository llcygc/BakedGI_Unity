#include "PostProcessVariables.hlsl"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GradiantStencilMaskGen

RW_TEXTURE2D(half, _R8Buffer);
int _MaskIndex;

groupshared uint zoneIndex;
[numthreads(8,8,1)]
void GradiantStencilMaskGen(uint3 globalIdx : SV_DispatchThreadID, uint3 localIdx : SV_GroupThreadID, uint3 groupIdx : SV_GroupID)
{
    if (localIdx.x == 0 && localIdx.y == 0)
    {
        float2 zoneCoord = groupIdx.xy / _GroupSize.xy;
        zoneCoord = abs(zoneCoord * 2.0f - 1.0f) - 2.0f / _GroupSize.xy;
        float length = dot(zoneCoord, zoneCoord);

        UNITY_BRANCH if (length <= 0.0625)
            zoneIndex = 0;
        else if (length <= 0.25)
            zoneIndex = 1;
        else if (length <= 0.5625)
            zoneIndex = 2;
        else if (length < 1.1)
            zoneIndex = 3;
        else
            zoneIndex = 4;
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    uint quadx = (int)(floor(localIdx.x % 4) / 2);
    uint quady = (int)(floor(localIdx.y % 4) / 2);
    uint quadIndex = quadx * 2 + quady;

    uint MaskIndexU = (uint)_MaskIndex;

    switch (zoneIndex)
    {
    case 0:
        _R8Buffer[globalIdx.xy] = 1;
        break;
    case 1:
        _R8Buffer[globalIdx.xy] = quadIndex != MaskIndexU;
        break;
    case 2:
        _R8Buffer[globalIdx.xy] = ((quadx + quady + MaskIndexU) % 2 == 0);
        break;
    case 3:
        _R8Buffer[globalIdx.xy] = quadIndex == MaskIndexU;
        break;
    default:
        _R8Buffer[globalIdx.xy] = 0;
        break;
    }
}

#pragma kernel NonGradiantStencilMaskGen

[numthreads(8, 8, 1)]
void NonGradiantStencilMaskGen(uint3 globalIdx : SV_DispatchThreadID, uint3 localIdx : SV_GroupThreadID, uint3 groupIdx : SV_GroupID)
{
    if (localIdx.x == 0 && localIdx.y == 0)
    {
        float2 zoneCoord = groupIdx.xy / _GroupSize.xy;
		zoneCoord = abs(zoneCoord * 2.0f - 1.0f) - 2.0f / _GroupSize.xy;
        float length = dot(zoneCoord, zoneCoord);

        UNITY_BRANCH if (length <= 1.0)
            zoneIndex = 1;
        else
            zoneIndex = 0;
    }

    GroupMemoryBarrierWithGroupSync();

	switch (zoneIndex)
	{
	case 0:
		_R8Buffer[globalIdx.xy] = 0x00;
		break;
	case 1:
		_R8Buffer[globalIdx.xy] = 0xff;
		break;
	}
}

#pragma kernel GradiantStencilMaskGenTest
[numthreads(8, 8, 1)]
void GradiantStencilMaskGenTest(uint3 globalIdx : SV_DispatchThreadID, uint3 localIdx : SV_GroupThreadID, uint3 groupIdx : SV_GroupID)
{
	if (localIdx.x == 0 && localIdx.y == 0)
	{
		float2 zoneCoord = groupIdx.xy / _GroupSize.xy;
		zoneCoord = zoneCoord * 2.0f - 1.0f;
		float length = dot(zoneCoord, zoneCoord);

		UNITY_BRANCH if (length <= 0.0625)
			zoneIndex = 0;
		else if (length <= 0.25)
			zoneIndex = 1;
		else if (length <= 0.5625)
			zoneIndex = 2;
		else if (length < 1.0)
			zoneIndex = 3;
		else
			zoneIndex = 4;
	}

	GroupMemoryBarrierWithGroupSync();

	uint quadx = (int)(floor(localIdx.x % 4) / 2);
	uint quady = (int)(floor(localIdx.y % 4) / 2);
	uint quadIndex = quadx * 2 + quady;

	uint MaskIndexU = (uint)_MaskIndex;

	switch (zoneIndex)
	{
	case 0:
		_R8Buffer[globalIdx.xy] = 0x0f;
		break;
	case 1:
		_R8Buffer[globalIdx.xy] = ~(0x01 << quadIndex);
		break;
	case 2:
		_R8Buffer[globalIdx.xy] = ((quadx + quady) % 2 == 0) ? 0x0a : 0x05;
		break;
	case 3:
		_R8Buffer[globalIdx.xy] = (0x01 << quadIndex) | 0x00;
		break;
	default:
		_R8Buffer[globalIdx.xy] = 0x00;
		break;
	}
}
